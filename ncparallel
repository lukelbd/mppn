#!/usr/bin/env bash
# The driver script
usage="ncparallel [OPTIONS...] [-d=DIMNAME] [-p=NP] [-n=NF] COMMAND INPUT1 [INPUT2 ... INPUTN] OUTPUT"
doc="This script splits up an input NetCDF file into chunks, runs a script
on some or all of those chunks in parallel, and merges the results into
an output NetCDF file.

Usage

  $usage

Positional arguments

  COMMAND  A command-line command, e.g. './myscript.sh' or a quoted
           string like 'python file.py'.
  INPUT    The input NetCDF file name(s).
  OUTPUT   The output NetCDF file name.

Optional arguments

  -d=* The dimension name along which we split the file. Defaults to 'lat'.
  -n=* The number of file pieces to generate. Defaults to 8.
  -p=* The maximum number of parallel processes. Defaults to -n but can
       also be smaller.

Flags

  -h   Print this message.
  -r   If passed, the OUTPUT file name comes before the INPUT file name(s)
       when calling this function and when passing arugments to COMMAND.
  -f   If passed and -d is a record (i.e. unlimited) dimension, the dimension
       has fixed length in the OUTPUT file.
  -k   If passed, temporary files and log files are not deleted. By default,
       log files are only kept if a process failed.
  -s   If passed, messages are silenced.
"
# Get arguments
# TODO: Support for nsplit=1, just run the command!
nsplit=8
dname=lat # can also split along time dimension?
keep=false
reverse=false
silent=false
dir=${0%/*}
source $dir/header.sh
while [ $# -ne 0 ]; do
  case "$1" in
    -h) echo "$doc" >&2 && exit 0 ;;
    -n=*) nsplit="${1#*=}" ;;
    -d=*) dname="${1#*=}" ;;
    -p=*) pmax="${1#*=}" ;;
    -f) flags="-f" ;;
    -k) keep=true ;;
    -r) reverse=true ;;
    -s) silent=true ;;
    -*) raise "Unknown argument ${1}." ;;
    *) args+=("$1") ;;
  esac
  shift
done
[ -z "$pmax" ] && pmax=$nsplit # same as number of files

# Set up exit trap
cleanup() {
  signal=$?
  [ -n "$keep" ] && $keep && return
  rm "${outputs[@]}" "${inputs[@]}" 2>/dev/null
  [ "$signal" -eq 0 ] && rm "${logs[@]}"
}


# Variables
cmd="${args[0]}"
args=("${args[@]:1}")
n=${#args[@]}
[ $n -ge 2 ] || raise "At least 2 filenames are required, but got $n: ${args[*]}"
for arg in "${args[@]}"; do
  [ -r "$arg" ] || raise "File \"$arg\" not found."
done
if $reverse; then
  inputs=("${args[@]:1:n-1}")
  output="${args[0]}"
else
  inputs=("${args[@]::n-1}")
  output="${args[n-1]}"
fi
[ ${#inputs[@]} -eq 1 ] || echo "Error: Only one input filename allowed."
input="${inputs[0]}"

# Time format
if $silent; then
  export TIMEFORMAT=$''
else
  export TIMEFORMAT=$'real %3lR user %3lU sys %3lS'
fi

# Special case
if [ $nsplit -eq 1 ]; then
  echo "Warning: You passed -n=1. Not dividing up file."
  if $reverse; then
    $cmd "$output" "${inputs[@]}"
  else
    $cmd "${inputs[@]}" "$output"
  fi
  exit  # with code from command
fi

# Divide into smaller files and collect names in a bash array
# Format will be input.0000.nc, input.0001.nc, etc.
# TODO: Divide up to n blocks
$silent || echo "Dividing file(s): ${input[*]##*/}"
time {
  inputs=($($dir/ncdivide -p=$pmax -n=$nsplit -d=$dname $flags "$input")) \
    || raise "ncdivide failed."
}

# Generate background processes for each file, for example a python script
# that creates a new NetCDF file from some input NetCDF file.
# WARNING: Make sure that your command preserves the 'domain_decomposition' dimension
# attribute and 'NumFilesInSet' global attribute on the output NetCDF file!
i=1
time {
  $silent || echo "Running $cmd"
  $silent || echo "Input files: ${inputs[*]##*/}"
  for ifile in "${inputs[@]}"; do
    # Output name
    prefix=${output%.nc} # just trim the extension
    suffix=${ifile:${#ifile}-7} # 0000.nc, 0001.nc, etc.
    ofile=${prefix}.${suffix}
    log=${output%/*}/${suffix%.nc}.log

    # Run command
    if $reverse; then
      $cmd "$ofile" "$ifile" &>$log & # trailing ampersand sends process to background
    else
      $cmd "$ifile" "$ofile" &>$log & # trailing ampersand sends process to background
    fi

    # Store process IDs and output files
    pids+=($!)
    logs+=("$log")
    outputs+=("$ofile")
    if [ $i -eq $pmax ]; then
      i=1
      pwait "$cmd" "${pids[@]}"
      unset pids
    else
      i=$((i + 1))
    fi
  done
  pwait "$cmd" "${pids[@]}"
  $silent || echo "Output files: ${outputs[*]##*/}"
}

# Finally combine, and remove the temporary files
# generated for parallel processing
$silent || echo "Combining into file: ${output##*/}"
time {
  $dir/nccombine "$output" "${outputs[@]}" \
    || raise "nccombine failed."
}
exit 0
