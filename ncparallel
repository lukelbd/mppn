#!/usr/bin/env bash
################################################################################
# The driver script
# Usage: ./ncparallel 'command' input output
################################################################################
# Get arguments
keep=false
dname=lat # can also split along time dimension?
nsplit=8
silent=false
while [ $# -ne 0 ]; do
  case "$1" in
    -n=*) nsplit="${1#*=}" ;;
    -d=*) dname="${1#*=}" ;;
    -p=*) pmax="${1#*=}" ;;
    -k) keep=true ;;
    -s) silent=true ;;
    -*) echo "Error: Unknown argument ${1}." && exit 1 ;;
    *) args+=("$1") ;;
  esac
  shift
done
[ -z "$pmax" ] && pmax=$nsplit # same as number of files
# Checks
if [ ${#args[@]} -ne 3 ]; then
  echo "Error: Usage is ncparallel 'command' 'input.nc' 'output.nc', where command is any command that accepts an input file and saves data to an output file."
  exit 1
fi
dir=${0%/*}
cmd="${args[0]}"
input="${args[1]}"
output="${args[2]}"

# Divide into smaller files and collect names in a bash array
# Format will be input.0000.nc, input.0001.nc, etc.
t=$(date +%s)
$silent || echo "Dividing file: ${input##*/}"
inputs=($($dir/ncdivide -n=$nsplit -d=$dname "$input"))
[ $? -ne 0 ] && echo "Error: ncdivide failed." && exit 1
$silent || echo "Elapsed time: $(($(date +%s) - t))s."

# Function that waits for background processes to finish, and makes
# sure they were all successful
pwait() {
  for pid in $@; do
    wait $pid
    if [ $? -ne 0 ]; then
      echo "Error: One of the processes failed."
      exit 1
    fi
  done
}

# Generate background processes for each file, for example a python script
# that creates a new NetCDF file from some input NetCDF file.
# WARNING: Make sure that your command preserves the 'domain_decomposition' dimension
# attribute and 'NumFilesInSet' global attribute on the output NetCDF file!
i=1
t=$(date +%s)
$silent || echo "Running $cmd"
$silent || echo "Input files: ${inputs[@]##*/}"
for ifile in "${inputs[@]}"; do
  prefix="${output%.nc}" # just trim the extension
  suffix="${ifile:${#ifile}-7}" # 0000.nc, 0001.nc, etc.
  ofile="${prefix}.${suffix}"
  $cmd "$ifile" "$ofile" &>/dev/null & # trailing ampersand sends process to background
  outputs+=("$ofile") # store output files in a bash array
  pids+=($!) # store process IDs in another bash array
  if [ $i -eq $pmax ]; then
    i=1; pwait ${pids[@]}
    unset pids
  else
    let i+=1
  fi
done
pwait ${pids[@]}
$silent || echo "Output files: ${outputs[@]##*/}"
$silent || echo "Elapsed time: $(($(date +%s) - t))s."

# Finally combine, and remove the temporary files
# generated for parallel processing
t=$(date +%s)
$silent || echo "Combining into file: ${output##*/}"
$dir/nccombine "$output" "${outputs[@]}"
[ $? -ne 0 ] && echo "Error: nccombine failed." && exit 1
if ! $keep; then
  rm "${outputs[@]}" "${inputs[@]}"
fi
$silent || echo "Elapsed time: $(($(date +%s) - t))s."
