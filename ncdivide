#!/usr/bin/env bash
################################################################################
# Magic function that mimics behavior of mppnccombine by separating
# files into chunks of latitudes with ncks hyerslabbing. Adds back
# attributes so that mppnccombine can combine them. Will also slice the
# file as parallel background processes.
################################################################################
# Defaults and checks
fix=false
dname=lat # can also split along time dimension?
nsplit=8
silent=false
if ! which ncks &>/dev/null; then
  echo "Error: ncks not found, mppncdivide requires the NetCDF Operators (NCO) tools."
  exit 1
fi
# Parse args
while [ $# -ne 0 ]; do
  case $1 in
    -d=*) dname=${1#*=} ;;
    -n=*) nsplit=${1#*=} ;;
    -f) fix=true ;; # fix record dimension?
    -s) silent=true ;;
    -*) echo "Error: Unknown flag ${1}." && exit 1 ;;
    *)  [ -n "$filename" ] && echo "Error: Got multiple files." && exit 1; filename="$1" ;;
  esac
  shift
done
! [[ "$filename" =~ .nc$ ]] && echo "Error: File does not end in '.nc' extension." && exit 1

# Get dimension size by parsing ncks
# Could also parse ncdump, but this script requires NCO already so why not
# See: http://nco.sourceforge.net/nco.html#ncdmnsz
ndim=$(ncks --trd -m -M "$filename" | grep -E -i ": ${dname}, size =" | cut -f 7 -d ' ' | uniq | xargs)
if [ -z "$ndim" ]; then
  echo "Dimension ${dname} not found in filename ${filename}."
  exit 1
fi
if ! [[ $ndim =~ ^[0-9]+$ ]]; then
  echo "Got invalid size ${ndim} for dimension ${dname}."
  exit 1
fi
if [ $((ndim % nsplit)) -ne 0 ]; then
  echo "Error: Incompatible dimension size ${ndim} for ${nsplit} splits."
  exit 1
fi

# Split up the file, making sure to add attributes to that mppnccombine
# can combine it again.
# WARNING: The attributes must be long type, not short
if $fix; then
  ncdump -h $filename | grep 'UNLIMITED' | grep $dname &>/dev/null
  [ $? -eq 0 ] && unlimited=true || unlimited=false
  $unlimited && flag="--fix_rec_dmn $dname" # required for mppnccombine
fi
for ni in $(seq 1 $nsplit); do
  file="${filename%.nc}.$(printf "%04d" $((ni-1))).nc"
  d1=$(((ni - 1)*ndim/nsplit)) # e.g. nsplit=10, ndim=200, goes 0, 20, 40, 60
  d2=$((ni*ndim/nsplit - 1)) # e.g. nsplit=10, ndim=200, goes 19, 39, 59
  { # store attribute as type *short*, i.e. int32
  # ncks -4 -O -h --no-abc --fix_rec_dmn 'time' --mk_rec_dmn $dname -d $dname,$d1,$d2 "$filename" "$file"
  ncks -O -h --no-abc $flag -d $dname,$d1,$d2 "$filename" "$file"
  ncatted -O -h -a domain_decomposition,$dname,o,l,"1,$ndim,$((d1+1)),$((d2+1))" "$file"
  ncatted -O -h -a NumFilesInSet,global,o,l,"$nsplit" "$file"
  } &
  pids+=($!)
  files+=("$file")
done
# Verify and exit
for pid in ${pids[@]}; do
  wait $pid
  if [ $? -ne 0 ]; then
    echo "Error: At least one of the ncks processes failed."
    rm "${files[@]}" &>/dev/null # cleanup
    exit 1
  fi
done
if ! $silent; then
  echo "${files[@]}"
fi
